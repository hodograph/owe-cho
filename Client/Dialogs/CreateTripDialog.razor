
<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="_trip.Name" Label="Name" Variant="Variant.Outlined"></MudTextField>
        <MudSwitch @bind-Checked="_trip.Indefinite" Label="Indefinite Trip" Color="Color.Primary"/>
        <MudTable Items="@_sharedWith" RowEditPreview="EditStarted" RowEditCancel="EditDone" RowEditCommit="EditDone">
            <ToolBarContent>
                <MudText Typo="Typo.subtitle1">Shared With</MudText>
                <MudSpacer/>
                <MudButton FullWidth="false" StartIcon="@Icons.Material.Filled.Add" OnClick="(e) => {_sharedWith.Add(new User()); StateHasChanged();}" Disabled="_editing">Add User</MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">
                    @context.DisplayName
                </MudTd>
                <MudTd DataLabel="Email">
                    @context.email
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="(e) => {_sharedWith.Remove(context); StateHasChanged();}" Disabled="_editing"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    @context.DisplayName
                </MudTd>
                <MudTd DataLabel="Email">
                    <MudAutocomplete T="string" 
                                     Variant="Variant.Outlined" 
                                     SearchFunc="@Search" 
                                     Value="@context.email" 
                                     ValueChanged="@(x => {context.DisplayName = Users.FirstOrDefault(y => y.email == x).DisplayName; context.email = x;})"
                                     ToStringFunc="@(x => $"{Users.FirstOrDefault(y => y.email == x).DisplayName} ({x})")"></MudAutocomplete>
                </MudTd>
            </RowEditingTemplate>
        </MudTable>
    </DialogContent>
     <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="Add">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private Trip _trip = new Trip();

    private bool _editing { get; set; }

    [Parameter]
    public Trip Trip
    {
        get => _trip;
        set
        {
            _trip = value;
            _sharedWith = Users.Where(x => _trip.SharedWith.Contains(x.email)).ToList();
        }
    }

    [Parameter]
    public User[] Users { get; set; }

    private List<User> _sharedWith = new List<User>();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Add()
    {
        if(_trip.id == default)
        {
            _trip.id = Guid.NewGuid();
        }

        _trip.SharedWith = _sharedWith.Select(x => x.email).ToList();
        MudDialog.Close(DialogResult.Ok(_trip));
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return Users.Select(x => x.email);
        }
        return Users.Where(x => x.email.Contains(value, StringComparison.OrdinalIgnoreCase)
            || x.DisplayName.Contains(value, StringComparison.OrdinalIgnoreCase)).Select(x => x.email);
    }

    private void EditStarted(object element)
    {
        _editing = true;
        StateHasChanged();
    }

    private void EditDone(object element)
    {
        _editing = false;
        StateHasChanged();
    }
}
