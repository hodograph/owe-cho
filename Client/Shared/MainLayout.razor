@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" @ref="@_mudThemeProvider"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        SyncOwe
        <LoginDisplay />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="@UserEmail">
            <MudContainer MaxWidth="MaxWidth.Large"> 
                @Body
            </MudContainer>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    [CascadingParameter] protected string UserEmail { get; set; }

    private bool _drawerOpen = true;

    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }

        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            UserEmail = user.Identities.First().Claims.FirstOrDefault(x => x.Type == "preferred_username").Value;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthState).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }
        else
        {
            UserEmail = user.Identities.First().Claims.FirstOrDefault(x => x.Type == "preferred_username").Value;
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
