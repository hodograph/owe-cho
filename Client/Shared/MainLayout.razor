@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient Http

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" @ref="@_mudThemeProvider"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        SyncOwe
        <LoginDisplay />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="@CurrentUser">
            <CascadingValue Value="@Users">
                <MudContainer MaxWidth="MaxWidth.Large"> 
                    @Body
                </MudContainer>
            </CascadingValue>
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    [CascadingParameter] protected User CurrentUser { get; set; }

    [CascadingParameter] protected User[] Users { get; set; }

    private bool _drawerOpen = true;

    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            UpdateUser(user.Identities.First().Claims.FirstOrDefault(x => x.Type == "preferred_username").Value, user.Identity.Name);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        
        //if (!user.Identity.IsAuthenticated)
        //{
        //    NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        //}
        //UpdateUser(user.Identities.First().Claims.FirstOrDefault(x => x.Type == "preferred_username").Value, user.Identity.Name);
        
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async void UpdateUser(string email, string name)
    {
        try
        {
            bool changeState = false; 
            if (Users == null)
            {
                Users = await Http.GetFromJsonAsync<User[]>($"/api/users");
                changeState = true;
            }
            if (CurrentUser == null)
            {
                CurrentUser = await Http.GetFromJsonAsync<User>($"/api/user/{email}");
                if (CurrentUser == null)
                {
                    CurrentUser = new User()
                        {
                            email = email,
                            DisplayName = name
                        };
                    await Http.PutAsJsonAsync<User>("/api/SetUser", CurrentUser);
                }
                changeState = true; 
            }

            if (changeState)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
