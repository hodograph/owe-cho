@page "/Trip/{id}"
@inject HttpClient Http
@inject IDialogService DialogService

@if(_trip == null)
{
    <MudProgressCircular Indeterminate="true" Class="mx-auto">Loading...</MudProgressCircular>
}
else if (_trip.id != _id)
{
    <MudText Typo="Typo.h6" Color="Color.Error" Class="mx-auto">Error: Could not find trip.</MudText>
}
else
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pa-6">
        <MudText Typo="Typo.h3">@_trip.Name</MudText>
        <MudStack Row="true">
            @if(_trip?.Owner == CurrentUser?.email)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="@((e) => EditTrip())">Edit Trip</MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => CreateTransaction())">New Transaction</MudButton>
        </MudStack>
    </MudStack>
    @if (_trip.Transactions.Any())
    {
        <MudTable Items="@_trip.Transactions">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Transactions</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Transaction Name</MudTh>
                <MudTh>Payer</MudTh>
                <MudTh>Total</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Transaction Name">@context.TransactionName</MudTd>
                <MudTd DataLabel="Payer">@Users.FirstOrDefault(x => x.email == context.Payer).DisplayName</MudTd>
                <MudTd DataLabel="Total">$@context.Total</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="@((e) => UpdateTransaction(context))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.h6" >There are no transactions for this trip.</MudText>
    }
}

@code
{
    [CascadingParameter]
    protected User CurrentUser { get; set; }

    [CascadingParameter]
    protected User[] Users { get; set; }

    private Trip _trip { get; set; }

    private string _searchString = string.Empty;

    private Guid _id;
    [Parameter]
    public string id
    {
        get => _id.ToString();
        set => _id = Guid.Parse(value);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTrip();
    }

    private async Task LoadTrip()
    {
        try
        {
            _trip = await Http.GetFromJsonAsync<Trip>($"/api/trip/{id}") ?? new Trip();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async void CreateTransaction()
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<CreateTransactionDialog> { { x => x.Users, GetTripUsers() } };
        var dialog = await DialogService.ShowAsync<CreateTransactionDialog>("New Transaction", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Transaction transaction)
        {
            _trip.Transactions.Add(transaction);
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            StateHasChanged();
        }
    }

    private async void UpdateTransaction(Transaction transaction)
    {
        int index = _trip.Transactions.IndexOf(transaction);
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<CreateTransactionDialog> { { x => x.Users, GetTripUsers() },
            { x => x.Transaction, transaction } };
        var dialog = await DialogService.ShowAsync<CreateTransactionDialog>("Edit Transaction", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Transaction newTransaction)
        {
            _trip.Transactions[index] = newTransaction;
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            StateHasChanged();
        }
    }

    private User[] GetTripUsers()
    {
        return Users.Where(x => _trip.SharedWith.Contains(x.email) || x.email == _trip.Owner).ToArray();
    }

    private async void EditTrip()
    {
        var parameters = new DialogParameters<CreateTripDialog> { { x => x.Users, Users }, { x => x.Trip, _trip } };
        var dialog = await DialogService.ShowAsync<CreateTripDialog>("Edit Trip", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Trip updatedTrip)
        {
            _trip = updatedTrip;
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            StateHasChanged();
        }
    }

    private bool FilterFunc(Transaction transaction) => FilterFunc(transaction, _searchString);

    private bool FilterFunc(Transaction transaction, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (transaction.TransactionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (transaction.Payer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}