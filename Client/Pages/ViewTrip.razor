@page "/Trip/{id}"
@inject HttpClient Http
@inject IDialogService DialogService

@if(_trip == null)
{
    <MudStack Row="true" Justify="Justify.Center" Class="pa-6" AlignItems="AlignItems.Center">
        <MudProgressCircular Indeterminate="true" Class="mx-auto">Loading...</MudProgressCircular>
    </MudStack>
}
else if (_trip.id != _id)
{
    
    <MudStack Row="true" Justify="Justify.Center" Class="pa-6" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h6" Color="Color.Error" Class="mx-auto">Error: Could not find trip.</MudText>
    </MudStack>
}
else
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pa-6">
        <MudText Typo="Typo.h3">@_trip.Name</MudText>
        <MudStack Row="true">
            @if(_trip?.Owner == CurrentUser?.email)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="@((e) => EditTrip())">Edit Trip</MudButton>
            }
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => CreateTransaction())">New Transaction</MudButton>
        </MudStack>
    </MudStack>
    @if (_trip.Transactions.Any())
    {
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <MudText Typo="Typo.h4">Personal Stats</MudText>
        <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="pa-6">
            <MudPaper>
                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6">Owed To You</MudText>
                    <MudChart 
                        ChartType="ChartType.Donut" 
                        InputData="@_personalSpentStats.Values.ToArray()" 
                        InputLabels="@_personalSpentStats.Keys.Select(x => x.DisplayName).ToArray()"
                        @bind-SelectedIndex="_personalSpentIndex">

                        <CustomGraphics>
                            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">$@_personalSpentStats.Values.ToArray().Sum().ToString()</text>
                            <MudText class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle">$@_personalSpentStats.Values.ToArray().Sum().ToString()</MudText>
                        </CustomGraphics>
                    </MudChart>
                    @if (_personalSpentIndex >= 0)
                    {
                        <MudText Typo="Typo.body1">@_personalSpentStats.Keys.ToArray()[_personalSpentIndex].DisplayName: $@_personalSpentStats.Values.ToArray()[_personalSpentIndex]</MudText>
                    }
                </MudStack>
            </MudPaper>
            <MudPaper>
                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6">You Owe</MudText>
                    <MudChart 
                        ChartType="ChartType.Donut" 
                        InputData="@_personalDebtStats.Values.ToArray()" 
                        InputLabels="@_personalDebtStats.Keys.Select(x => x.DisplayName).ToArray()" 
                        @bind-SelectedIndex="_personalDebtIndex">

                        <CustomGraphics>
                            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">$@_personalDebtStats.Values.ToArray().Sum().ToString()</text>

                            <MudText class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle">$@_personalDebtStats.Values.ToArray().Sum().ToString()</MudText>
                        </CustomGraphics>
                    </MudChart>
                    @if (_personalDebtIndex >= 0)
                    {
                        <MudText Typo="Typo.body1">@_personalDebtStats.Keys.ToArray()[_personalDebtIndex].DisplayName: $@_personalDebtStats.Values.ToArray()[_personalDebtIndex]</MudText>
                    }
                </MudStack>
            </MudPaper>
        </MudStack>

        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <MudText Typo="Typo.h4">Trip Stats</MudText>
        <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="pa-6">
            <MudPaper>
                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6">Spending Stats</MudText>
                    <MudChart ChartType="ChartType.Donut" InputData="@_spentStats.Values.ToArray()" InputLabels="@_spentStats.Keys.Select(x => x.DisplayName).ToArray()" />
                </MudStack>
            </MudPaper>
            <MudPaper>
                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h6">Debtor Stats</MudText>
                    <MudChart ChartType="ChartType.Donut" InputData="@_oweStats.Values.ToArray()" InputLabels="@_oweStats.Keys.Select(x => x.DisplayName).ToArray()" />
                </MudStack>
            </MudPaper>
        </MudStack>

        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
        <MudTable Items="@_trip.Transactions">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Transactions</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Transaction Name</MudTh>
                <MudTh>Payer</MudTh>
                <MudTh>Total</MudTh>
                <MudTh>Personal Change</MudTh>
                <MudTh />
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Transaction Name">@context.TransactionName</MudTd>
                <MudTd DataLabel="Payer">@Users?.FirstOrDefault(x => x.email == context.Payer).DisplayName</MudTd>
                <MudTd DataLabel="Total">$@context.Total</MudTd>
                <MudTd DataLabel="Personal Change">
                    @if(context.Payer == CurrentUser?.email)
                    {
                        <MudText Color="Color.Success">$@GetAmountOwedToPayer(context)</MudText>
                    }
                    else if(context.Debts.Any(x => x.Debtor == CurrentUser?.email))
                    {
                        <MudText Color="Color.Error">$@context.CalculatePayments().FirstOrDefault(x => x.Debtor == CurrentUser?.email).Amount</MudText>
                    }
                    else
                    {
                        <MudText Color="Color.Default">-</MudText>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="@((e) => UpdateTransaction(context))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.h6" >There are no transactions for this trip.</MudText>
    }
}

@code
{
    [CascadingParameter]
    protected User CurrentUser { get; set; }

    [CascadingParameter]
    protected User[] Users { get; set; }

    private Trip _trip { get; set; }

    private string _searchString = string.Empty;

    private Dictionary<User, double> _spentStats = new Dictionary<User, double>();

    private Dictionary<User, double> _oweStats = new Dictionary<User, double>();

    private Dictionary<User, double> _personalSpentStats = new Dictionary<User, double>();

    private Dictionary<User, double> _personalDebtStats = new Dictionary<User, double>();

    private int _personalSpentIndex = -1;

    private int _personalDebtIndex = -1;


    private Guid _id;
    [Parameter]
    public string id
    {
        get => _id.ToString();
        set => _id = Guid.Parse(value);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTrip();
    }

    private async Task LoadTrip()
    {
        try
        {
            _trip = await Http.GetFromJsonAsync<Trip>($"/api/trip/{id}") ?? new Trip();
            _spentStats.Clear();
            _oweStats.Clear();
            _personalSpentStats.Clear();
            _personalDebtStats.Clear();
            _personalSpentIndex = -1;
            _personalDebtIndex = -1;
            foreach(Transaction transaction in _trip.Transactions)
            {
                User spender = UserFromEmail(transaction.Payer);

                InitOrAddDebt(ref _spentStats, transaction.Total, spender);

                foreach(Debt debt in transaction.CalculatePayments())
                {
                    User debtor = UserFromEmail(debt.Debtor);

                    if (!debtor.Equals(spender))
                    {
                        InitOrAddDebt(ref _oweStats, debt.Amount, debtor);

                        if (spender.Equals(CurrentUser))
                        {
                            InitOrAddDebt(ref _personalSpentStats, debt.Amount, debtor);
                        }

                        if (debtor.Equals(CurrentUser))
                        {
                            InitOrAddDebt(ref _personalDebtStats, debt.Amount, spender);
                        }
                    }
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void InitOrAddDebt(ref Dictionary<User, double> statDict, double amount, User user)
    {
        if (!statDict.ContainsKey(user))
        {
            statDict[user] = 0;
        }

        statDict[user] += amount;
    }

    private User UserFromEmail(string email)
    {
        return Users.FirstOrDefault(x => x.email == email);
    }

    private double GetAmountOwedToPayer(Transaction transaction)
    {
        return transaction.Total - transaction.CalculatePayments().Where(x => x.Debtor == transaction.Payer).Select(x => x.Amount).Sum();
    }

    private async void CreateTransaction()
    {
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<CreateTransactionDialog> { { x => x.Users, GetTripUsers() } };
        var dialog = await DialogService.ShowAsync<CreateTransactionDialog>("New Transaction", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Transaction transaction)
        {
            _trip.Transactions.Add(transaction);
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            LoadTrip();
        }
    }

    private async void UpdateTransaction(Transaction transaction)
    {
        int index = _trip.Transactions.IndexOf(transaction);
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<CreateTransactionDialog> { { x => x.Users, GetTripUsers() },
            { x => x.Transaction, transaction } };
        var dialog = await DialogService.ShowAsync<CreateTransactionDialog>("Edit Transaction", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Transaction newTransaction)
        {
            _trip.Transactions[index] = newTransaction;
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            LoadTrip();
        }
    }

    private User[] GetTripUsers()
    {
        return Users.Where(x => _trip.SharedWith.Contains(x.email) || x.email == _trip.Owner).ToArray();
    }

    private async void EditTrip()
    {
        var parameters = new DialogParameters<CreateTripDialog> { { x => x.Users, Users }, { x => x.Trip, _trip } };
        var dialog = await DialogService.ShowAsync<CreateTripDialog>("Edit Trip", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Trip updatedTrip)
        {
            _trip = updatedTrip;
            await Http.PutAsJsonAsync<Trip>("/api/SetTrip", _trip);
            LoadTrip();
        }
    }

    private bool FilterFunc(Transaction transaction) => FilterFunc(transaction, _searchString);

    private bool FilterFunc(Transaction transaction, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (transaction.TransactionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (transaction.Payer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}